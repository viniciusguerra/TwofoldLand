<?xml version="1.0" encoding="utf-8"?>
<root><!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
	<data name="IKinetic.Drag" xml:space="preserve">
		<value>Enables dragging of an Entity if it is loose. Deselect it to let go</value>
	</data>
	<data name="IKinetic.IsLoose" xml:space="preserve">
		<value>If true, the object can be dragged, else, it cannot</value>
	</data>
	<data name="IKinetic.Pull" xml:space="preserve">
		<value>Pulls the Entity towards you</value>
	</data>
	<data name="IKinetic.Push" xml:space="preserve">
		<value>Pushes the Entity away from you</value>
	</data>
	<data name="IKinetic.Push1" xml:space="preserve">
		<value>Pushes the Entity in the given direction: left, right, forward or back</value>
	</data>
	<data name="Item.AncientChestKey.Description" xml:space="preserve">
		<value>Ancient Chests are told to be gifts of nature. It's said that he who unlocks it will inherit pieces of power in its purest form.</value>
	</data>
	<data name="Item.AncientChestKey.Name" xml:space="preserve">
		<value>Ancient Chest Key</value>
	</data>
	<data name="IUnlockable.BinaryKey" xml:space="preserve">
		<value>The binary number which is the key to this Entity</value>
	</data>
	<data name="IUnlockable.Toggle" xml:space="preserve">
		<value>Opens or closes if Unlocked</value>
	</data>
	<data name="IUnlockable.Unlock" xml:space="preserve">
		<value>Brings up the Binary Conversion UI</value>
	</data>
	<data name="IUnlockable.Unlock1" xml:space="preserve">
		<value>Unlocks when giving the BinaryKey value or a valid Key from the Storage</value>
	</data>
	<data name="IUnlockable.Unlocked" xml:space="preserve">
		<value>True if the Entity is unlocked, false otherwise</value>
	</data>
	<data name="IVerbal.Messages" xml:space="preserve">
		<value>Messages which are expressed by this Entity</value>
	</data>
	<data name="IVulnerable.CurrentHealth" xml:space="preserve">
		<value>Current amount of this Entity's resistance. When it reaches 0, the Entity dies</value>
	</data>
	<data name="IVulnerable.MaxHealth" xml:space="preserve">
		<value>Total amount of this Entity's resistance</value>
	</data>
	<data name="TestScene.Strings.ChestSign1" xml:space="preserve">
		<value>No mortal can violate an Ancient Chest for it answers to a forgotten language</value>
	</data>
	<data name="TestScene.Strings.ChestSign2" xml:space="preserve">
		<value>The legend states that they store power in its purest form</value>
	</data>
	<data name="TestScene.Strings.CompilerSign1" xml:space="preserve">
		<value>The Compiler is said to bring thoughts into reality</value>
	</data>
	<data name="TestScene.Strings.CompilerSign2" xml:space="preserve">
		<value>Ancient Ones could create Spells when near it</value>
	</data>
	<data name="TestScene.Strings.CompilerSign3" xml:space="preserve">
		<value>They also had it as a safe place, where their energies would be renewed</value>
	</data>
	<data name="UI.Codex.MethodsTitle" xml:space="preserve">
		<value>Methods</value>
	</data>
	<data name="UI.Codex.PropertiesTitle" xml:space="preserve">
		<value>Properties</value>
	</data>
	<data name="UI.Codex.SelectSkillMessage" xml:space="preserve">
		<value>Select a Skill</value>
	</data>
	<data name="UI.Codex.SkillsButton" xml:space="preserve">
		<value>Skills</value>
	</data>
	<data name="UI.Codex.SpellsButton" xml:space="preserve">
		<value>Spells</value>
	</data>
	<data name="UI.CollectableAcquired.DefinitionButton" xml:space="preserve">
		<value>Go To Definition</value>
	</data>
	<data name="UI.CollectableAcquired.ItemAcquired" xml:space="preserve">
		<value>New Item Acquired!</value>
	</data>
	<data name="UI.CollectableAcquired.SkillAcquired" xml:space="preserve">
		<value>Skill Acquired!</value>
	</data>
	<data name="UI.CollectableAcquired.SkillLeveledUp" xml:space="preserve">
		<value>Skill Leveled Up!</value>
	</data>
	<data name="UI.Storage.ItemsTitle" xml:space="preserve">
		<value>Items</value>
	</data>
	<data name="UI.Storage.SpellsTitle" xml:space="preserve">
		<value>Loaded Spells</value>
	</data>
	<data name="UI.Terminal.Placeholder" xml:space="preserve">
		<value>Type Command...</value>
	</data>
	<data name="UI.Codex.LevelUpButton" xml:space="preserve">
		<value>Level Up</value>
	</data>
</root>